from sage.all_cmdline import *
from sage.all import *

# Q1c_N=[95039415138817040924627285644933407432071873836784256076724535274046719915906591150598438113610182151793352384596024412657968277738656985467325078072398433420539066604491184188984620955268951673971550303781306517123887795269446627992119146921461111563829474574530271836746332781965455908745199623504315962641, 90039495567041068476039399463752783503359626522941980686195855601231215979516800686875577545317283935540535820747290296827258289972885947076098940390830603704135195844408855421182052074110327262406576234332326183600628458555628326039293332571883069359058690559742915945985600279437974987001978450929949045889, 92508180562209043136025247531693022948436834492035830121753808864322163971257684485981119796001024353416657637785076628195267987339211091243685602739282978567808341565733898890306403711490433514007878439915298319679323885159618271503688026645561016499430848775895943381989536169482796500466376632456109355979, 100879030327594704317133407748521655815191363873631040421429725016728929424261410765096302169000967095076642876907811730400993370683014826783943845777589293492668522454835122714551477540883528681788451364893380312048451021258015131045836134071269857817500844024805952940758246172197966797370673812490403992653, 91989979220952301904274795218859647237650912766460759687963984938934481020621257090406126662151019813220391238220797962408086178444043902598560534144740162922035354483127893706813518259256195948933948624836735884523295750493243674898132907958984254712212702871059427247739149089840428404136189198181627242799, 144341976699674053724489156914488486842951443205908199077422715398128844595569477895053881187409425209156777349942432411149043923053477534432971892572736770912441413484978677007496243326979192717947074763201597255828845278924684189535875544796441673666252560700255309506370609177637724867850427619167648976769, 102542880106844227640850170772345086310685439420645533268781194722440764567279110818471511919720638784735051478738346558473613961257997166576164853906383439686787122402484815013713460783732919132927526079124280633777129166579845220178654785634566411159571028405018420740283847681291239466489926753797761182227, 138929369821153792583432885446798310763276287151080538947814447423960988281198238452498372447481144017729170931742805400599020465893673041040521166710591324228430916999177297741794848777204451573159149746104687258805889807336896445605873112475349214252171573480429542566967138069906151498077800104627468457717]
# Q1c_E=[763792137107893271439303554223366161953920472922273815628439893321259546584587074358245687919, 2334341406234653949161484917213131635876582208144000909072211427661016825334237889014214301978498466846871606915702748307887531683540055839665191686992641, 725777371309510301343282048956340774969760722492673297118201348331285176147347952119943579591, 678035913918448212199825918708088760123799383453239064624022606773890526089477548617782337611, 566665108645853786863843527253980459764206023436155487413445312408580893829088003151438814017, 940865030616678868831214235141266426576005893761202767879508043147297766918952420355602985297, 569458443814474690353606546147674723654550470369876496967468251589494513490096344361907971873792549240960199134250086824832143982708311701080241043418753, 5649401808587649019245115573284193897911436816652182369672734390495484471504852988354787484680510437909163370395213386715731466385372612445633254501697003]
Q1c_N=[109095599277174168849051087485696701010389888429374098843518087271820371106449825119080235970991438844646608256860749627506274890338800208738520916619412099403721036444290559106227205718369497751025706293597604103572683930390118994389823330062502387922394403732319523300540408577053723890563000104297167951559, 132248581979320616691019049665653800857766761946691124928162804874734835088962403934374233535030345786285418666168457923877853199428169387317388836073160551102862863260006653581969546903663590075220858951636587821480486581600559938999508352879918715614806820612475740751814766736173311075540400226074901324107, 125771809335625237328217643245785111350405428643885532762080883518592858162798840735890434434306847447365231805539393334009323628694407617053612846852916592292178835351387123430058385451576037352299313530801536596583548532995966802616776049568210098910892593212951344093497166533061365635559056879290838847509, 132506884473729523643463306627795232386234888791136211174257159226895467402194189975841217405657477885095470506946230160920475485924019906844169656989774826613901506892919447071040550539090573251659484847769798460354764960452908101590211604437649595356518201771400699779998677369617954400224969531312785841809, 107823877576388558296449632535009096597084111784116376843033157583856604198409524485212249473486588942614143075919418593742319517372517419314642596549212076927695800310797817256111587616839572731767479654441144390478086492364142690679925901667788437046300623231343459773507078245391364368129345048420217805443, 90424477825888139110593765606853191813370313722308636982516003886834770197470994814531189619503716445277573816347854619185385224162459836736936902636088192351833674431151536249321043490512466576384131120953901123114901202123093167810067040715623712221043829592318135934452852569619731952618242502712636746609, 89914803280464714303185946743138687019816568598022139695781970003232078142203397065434917489254408881766853230868726554776944476817658243316591965743149549749641257782851557237548182290820113326774441641291030092678412164828304142163368158950950105461107278214553789555124557520266103438552604069147681231797, 93797590691416318041494253969563978153652833862744207255299080977647329427639350779302574250839409273044023684150105788755464643046386632377420393152494695829353817960679987581336990199376935579496470281546819192177678980115998886608290453568318143714905110463400491570610685741762616810551503135012001393289]
Q1c_E=[792613440192210564441361246146739418866047333013934288139657892950506943496802749751352268811, 8891713534373585368773478626727025079782885305497183546660063614448364430035981931339683615074584530113638458688456933521876458461656839935134063064228951, 3585083845613465008048601659103129241233466281785977125620679573233040504174505009135977746140980312752672785741938753401808116140330989593334863224465331, 10042903096733761947047794508526620662946869211268612277640895394066434774229751078584755872887547797237514052532417359894263124446539261019668587887172767, 788271902594755312130920690474505586460645522749152606653559173130295020096381382029710266917, 606441908313020068058101604469936091351644366031963891205026765843411602710047999773529096061, 820946931287179715704821873904084499528428411361708981055579193277698391987498543301445932427, 8501443395083527974227378606012418084094968294564433618578752931507847646323095844662092079111068956078490219714465295310850345368658394019608097449801229]
# Q1c_N=[29*11, 7*23, 11*31, 19*37]
# Q1c_e=[7, 3, 5, 11]

def solve(f, N):
    delta = 1 # degree
    beta = 1/2
    epsi = beta/8
    gam = ceil(1/2 * N**(beta**2/delta-epsi))
    # print(gam, 2**(512-ell))
    # print(f)

    m = ceil(beta**2 / (delta*epsi))
    t = floor(delta*m*(1-beta)/beta)

    # Hacky way of obtaining the full-list of coefs (including zeroes)
    def coefs(fun, degree=(m+t)):
        assert(len(list(fun)) <= degree)
        c = list(fun+x**degree) # Add temporary monomial
        return c[:-1] # Remove the temporary monomial

    base = []
    for i in range(delta):
        for j in range(m):
            u = (x**i)*(N**(m-j))*(f**j)
            base.append(coefs(u(gam*x)))

    for k in range(t):
        v = (x**k)*(f**m)
        base.append(coefs(v(gam*x)))

    reduced = matrix(base).LLL()
    # print("\n".join([str([hex(a) for a in v]) for v in reduced]))

    h = sum([a*x**i/(gam**i) for i, a in enumerate(reduced[0])])
    if(len(h.roots()) != 0):
        print("h.roots() = ", h.roots()[0][0])
        print(gcd(f(h.roots()[0][0]), N)!= N)
    return (len(h.roots()) == 0)

ans = 0
for i in range(len(Q1c_N) -1, -1, -1):
    e, N = Q1c_E[i], Q1c_N[i]
    e_inv = inverse_mod(e, N)
    R = ZZ['x']
    x = R.gen()
    f = x + e_inv
    ans *= 2
    ans += solve(f, N)

print(ans)

    


    