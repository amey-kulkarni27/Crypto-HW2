#!/usr/bin/env python
# coding: utf-8

Q1a_e=9
Q1a_N=90207010381426267103242670099964907358437016039144919625254994692383902714846847367774987933140527942034543688005434220396734406843409903313741757447357430382571066194709455921506815516206156853118901970396262530855311558839965012050994430221301279739131305775736260979724539653025563952050272529258397898869
Q1a_top=7237832633813650740141536305798388325375260951805388034403335830578482280079023948518784376364919509523724291406591154349904294041066175930306924189319168
Q1a_ell=448
Q1b_e=11
Q1b_N=99782296475367762991554702466834027785762146959282244349447067558948507818088463020008302295438212438020397878420372587653033133451714187803669507980265757197002882024023266792017388070989989766799763440990457833140536119028979673195871405378109589799741886674367807607580487633059145919648200328589050295041
Q1b_low=30814064615965857203285999135202987512924091511924776529297512750619577249252662554139489900577982873864104207301863696222009631090719
Q1b_ell=448
Q1c_N=[95039415138817040924627285644933407432071873836784256076724535274046719915906591150598438113610182151793352384596024412657968277738656985467325078072398433420539066604491184188984620955268951673971550303781306517123887795269446627992119146921461111563829474574530271836746332781965455908745199623504315962641, 90039495567041068476039399463752783503359626522941980686195855601231215979516800686875577545317283935540535820747290296827258289972885947076098940390830603704135195844408855421182052074110327262406576234332326183600628458555628326039293332571883069359058690559742915945985600279437974987001978450929949045889, 92508180562209043136025247531693022948436834492035830121753808864322163971257684485981119796001024353416657637785076628195267987339211091243685602739282978567808341565733898890306403711490433514007878439915298319679323885159618271503688026645561016499430848775895943381989536169482796500466376632456109355979, 100879030327594704317133407748521655815191363873631040421429725016728929424261410765096302169000967095076642876907811730400993370683014826783943845777589293492668522454835122714551477540883528681788451364893380312048451021258015131045836134071269857817500844024805952940758246172197966797370673812490403992653, 91989979220952301904274795218859647237650912766460759687963984938934481020621257090406126662151019813220391238220797962408086178444043902598560534144740162922035354483127893706813518259256195948933948624836735884523295750493243674898132907958984254712212702871059427247739149089840428404136189198181627242799, 144341976699674053724489156914488486842951443205908199077422715398128844595569477895053881187409425209156777349942432411149043923053477534432971892572736770912441413484978677007496243326979192717947074763201597255828845278924684189535875544796441673666252560700255309506370609177637724867850427619167648976769, 102542880106844227640850170772345086310685439420645533268781194722440764567279110818471511919720638784735051478738346558473613961257997166576164853906383439686787122402484815013713460783732919132927526079124280633777129166579845220178654785634566411159571028405018420740283847681291239466489926753797761182227, 138929369821153792583432885446798310763276287151080538947814447423960988281198238452498372447481144017729170931742805400599020465893673041040521166710591324228430916999177297741794848777204451573159149746104687258805889807336896445605873112475349214252171573480429542566967138069906151498077800104627468457717]
Q1c_E=[763792137107893271439303554223366161953920472922273815628439893321259546584587074358245687919, 2334341406234653949161484917213131635876582208144000909072211427661016825334237889014214301978498466846871606915702748307887531683540055839665191686992641, 725777371309510301343282048956340774969760722492673297118201348331285176147347952119943579591, 678035913918448212199825918708088760123799383453239064624022606773890526089477548617782337611, 566665108645853786863843527253980459764206023436155487413445312408580893829088003151438814017, 940865030616678868831214235141266426576005893761202767879508043147297766918952420355602985297, 569458443814474690353606546147674723654550470369876496967468251589494513490096344361907971873792549240960199134250086824832143982708311701080241043418753, 5649401808587649019245115573284193897911436816652182369672734390495484471504852988354787484680510437909163370395213386715731466385372612445633254501697003]


from sage.all_cmdline import *
R = ZZ['x']
x = R.gen()

def solve(f):
    delta = 1 # degree
    beta = 1/2
    epsi = beta/8
    gam = ceil(1/2 * N**(beta**2/delta-epsi))
    assert(gam > 2**(512-ell))
    # print(gam, 2**(512-ell))
    # print(f)

    m = ceil(beta**2 / (delta*epsi))
    t = floor(delta*m*(1-beta)/beta)

    # Hacky way of obtaining the full-list of coefs (including zeroes)
    def coefs(fun, degree=(m+t)):
        assert(len(list(fun)) <= degree)
        c = list(fun+x**degree) # Add temporary monomial
        return c[:-1] # Remove the temporary monomial

    base = []
    for i in range(delta):
        for j in range(m):
            u = (x**i)*(N**(m-j))*(f**j)
            base.append(coefs(u(gam*x)))

    for k in range(t):
        v = (x**k)*(f**m)
        base.append(coefs(v(gam*x)))

    reduced = matrix(base).LLL()
    # print("\n".join([str([hex(a) for a in v]) for v in reduced]))

    h = sum([a*x**i/(gam**i) for i, a in enumerate(reduced[0])])
    return h.roots()

# Q1.1
print("# Q1.1")
# from lib import Q1a_e, Q1a_N, Q1a_top, Q1a_ell
e = Q1a_e
N = Q1a_N
ell = Q1a_ell
f = e*Q1a_top + x

roots = solve(f)

r = roots[0][0]
# print("# roots :" + str(roots))
p = gcd(f(r), N)
q = N / p
assert(1 < p and 1 < q and p * q == N)
# print("# p=" + hex(p))
# print("# q=" + hex(q))
d = Mod(e, (p-1)*(q-1))**-1
d_p = Mod(d, p-1)
assert(Q1a_top >> (512-ell) == d_p >> (512-ell))
print("Q1a_val=" + str(d_p))

print()

# Q1.2
print("# Q1.2")
# from lib import Q1b_e, Q1b_N, Q1b_low, Q1b_ell
e = Q1b_e
N = Q1b_N
ell = Q1b_ell
d_low = Q1b_low

k = 5 # for me it's 5, trial and error
assert(k > 1 and k < e)

# Compute s_low
temp = (e*d_low - 1)
exp = ell
while k % 2 == 0:
    if temp % 2 != 0:
        raise Exception("Invalid k")
    k = k // 2
    temp = temp // 2
    exp = exp - 1
temp = Mod(temp, 2**exp) / k
s_low = ((N+1) - temp).lift()

p_low = 1

def hensel_test(p, start):
    for i in range(start, 512):
        if not Mod(p**2 - s_low*p + N, 2**(i+1)).lift() == 0:
            return i
    return 512

# Trash a few bits of precision to eliminate errors
ell = ell - 10

best = hensel_test(p_low, 0)
for j in range(1, ell):
    new_p = p_low + 2**j
    new_test = hensel_test(new_p, best)
    if new_test > best:
        best = new_test
        p_low = new_p

# print("# p_low=" + str(p_low))

assert((p_low * (s_low - p_low) - N) % 2**ell == 0)

# print("s_low=", s_low)
# print("# s_low valid :", Mod(e*d_low, 2**ell) == Mod(1 + 2*(N - s_low + 1), 2**ell))

a = (Mod(p_low, N) / (2**ell)).lift()

f = a + x

roots = solve(f)

r = roots[0][0]
# print("# roots :" + str(roots))
p = gcd(f(r), N)
q = N / p
assert(1 < p and 1 < q and p * q == N)
# print("# p=" + hex(p))
# print("# q=" + hex(q))
d = Mod(e, (p-1)*(q-1))**-1
print("Q1b_val=" + str(d))

# Q1.3
print()
print("# Q1.3")
# from lib import Q1c_E, Q1c_N
ans = 0
for i in range(len(Q1c_N) -1, -1, -1):
    e, N = Q1c_E[i], Q1c_N[i]
    e_inv = inverse_mod(e, N)
    R = ZZ['x']
    x = R.gen()
    f = x + e_inv
    ans *= 2
    ans += len(solve(f)) == 0

print("Q1c_flag=" + str(ans))